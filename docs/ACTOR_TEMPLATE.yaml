# Strigoi Actor Template
# This template defines the complete structure for a Strigoi actor
# Copy this file and fill in the sections to create a new actor

# === IDENTITY SECTION ===
actor:
  # Unique identifier - use a UUID v4 generator
  uuid: "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
  
  # Short, unique name (lowercase, underscores)
  name: "example_actor"
  
  # Human-readable display name
  display_name: "Example Actor for Template"
  
  # Semantic version
  version: "1.0.0"
  
  # Cardinal direction this actor operates in
  # Options: north (LLMs), east (human), south (tools/data), west (VCP-MCP), center (router)
  direction: "north"
  
  # Risk level of this actor's operations
  # Options: low, medium, high, critical
  risk_level: "low"
  
  # Brief one-line description (for search results)
  description_brief: "Brief description of what this actor does"
  
  # Full description with details
  description: |
    Detailed multi-line description of this actor's purpose,
    capabilities, and how it contributes to security assessments.
    
    Can include multiple paragraphs and markdown formatting.

# === PROVIDENCE & ATTRIBUTION ===
providence:
  # Author information
  author:
    name: "Your Name"
    email: "your.email@example.com"
    organization: "Your Organization (optional)"
    pgp_key: "0xXXXXXXXXXXXXXXXX (optional)"
  
  # Lineage tracking
  lineage:
    # Parent actor this was derived from (if any)
    parent: "parent_actor_name"
    
    # Other actors that inspired this one
    inspired_by:
      - "owasp_scanner"
      - "llm_security_toolkit"
    
    # When this lineage branch was created
    forked_date: "2025-01-01"
  
  # License
  license: "Apache-2.0"
  
  # Ethical use statement
  ethics:
    white_hat_only: true
    forbidden_targets:
      - "production systems without authorization"
      - "personal data exfiltration"
    intended_use: "Security assessment and vulnerability discovery"

# === COMPATIBILITY & REQUIREMENTS ===
compatibility:
  # Minimum Strigoi version required
  strigoi_version: ">=0.3.0"
  
  # Operating system compatibility
  platforms:
    - "linux"
    - "darwin"
    - "windows"
  
  # Architecture compatibility
  architectures:
    - "amd64"
    - "arm64"

# === BEHAVIOR & THEORY ===
behavior:
  # Academic or theoretical foundation
  theory: |
    Explain the theoretical basis for this actor's approach.
    Include references to papers, standards, or methodologies.
    
    References:
    - [1] Smith, J. "LLM Security Patterns" (2024) doi:10.1234/example
    - [2] OWASP AI Security Top 10
  
  # Assumptions this actor makes
  assumptions:
    - "Target exposes HTTP/HTTPS endpoints"
    - "JSON-based API responses"
    - "Standard ports unless specified"
  
  # Known limitations
  limitations:
    - "Cannot detect custom protocols"
    - "Requires network connectivity"
    - "May trigger rate limiting"

# === SEARCH OPTIMIZATION ===
search:
  # Tags for search and categorization
  tags:
    - "llm"
    - "api"
    - "discovery"
    - "reconnaissance"
    - "endpoint-enumeration"
  
  # Categories (primary and secondary)
  categories:
    primary: "reconnaissance"
    secondary:
      - "enumeration"
      - "discovery"
  
  # Keywords for full-text search
  keywords:
    - "openai api discovery"
    - "anthropic endpoint"
    - "llm enumeration"
  
  # Target platforms this actor can assess
  platforms:
    - "openai"
    - "anthropic"
    - "google"
    - "generic"
  
  # MITRE ATT&CK mapping
  mitre_attack:
    - technique: "T1595"
      name: "Active Scanning"
      subtechnique: "T1595.002"
      
    - technique: "T1592"
      name: "Gather Victim Host Information"

# === CAPABILITIES & TRANSFORMATIONS ===
capabilities:
  # What this actor can do
  provided:
    - name: "endpoint_discovery"
      description: "Discovers API endpoints using pattern matching"
      confidence: 0.85  # 0.0-1.0 confidence in this capability
      
    - name: "version_detection"
      description: "Detects API version from responses"
      confidence: 0.70
  
  # What capabilities this actor requires
  required:
    - "network_access"
    - "dns_resolution"
  
  # Optional capabilities that enhance this actor
  optional:
    - "proxy_support"
    - "rate_limiting"

# === DATA CONTRACTS ===
data_contracts:
  # Input specifications
  inputs:
    - name: "target"
      description: "Target to probe"
      required: true
      formats:
        - type: "url"
          schema:
            type: "string"
            pattern: "^https?://"
            example: "https://api.example.com"
            
        - type: "domain"
          schema:
            type: "string"
            format: "hostname"
            example: "example.com"
  
  # Output specifications
  outputs:
    - name: "discoveries"
      description: "Discovered endpoints and metadata"
      guaranteed: true  # This output is always produced
      format:
        type: "endpoint_list"
        schema:
          type: "array"
          items:
            type: "object"
            properties:
              url:
                type: "string"
                description: "Full endpoint URL"
              platform:
                type: "string"
                description: "Detected platform"
              confidence:
                type: "number"
                minimum: 0.0
                maximum: 1.0
            required: ["url", "platform", "confidence"]
        example: |
          [
            {
              "url": "https://api.example.com/v1/models",
              "platform": "openai",
              "confidence": 0.95
            }
          ]
  
  # How this actor transforms data
  transforms:
    - from: "domain"
      to: "endpoint_list"
      description: "Transforms domain into list of discovered endpoints"
      preserves: ["original_domain"]
      adds: ["endpoints", "platforms", "confidence_scores"]

# === CHAINING & INTERACTION ===
interaction:
  # Chaining rules
  chaining:
    # Can this actor start a chain?
    can_initiate: true
    
    # Can this actor end a chain?
    can_terminate: false
    
    # Actors that can follow this one
    chains_to:
      - actor: "model_interrogation"
        description: "Analyze discovered models"
        data_mapping:
          from: "endpoint_list"
          to: "target_endpoints"
          
      - actor: "auth_boundary_tester"
        description: "Test authentication on endpoints"
        data_mapping:
          from: "endpoint_list"
          to: "api_targets"
    
    # Actors that can precede this one
    chains_from:
      - actor: "subdomain_enumerator"
        description: "Discover subdomains first"
        data_mapping:
          from: "discovered_domains"
          to: "target_domains"
    
    # Conditional chaining based on output
    conditional_chains:
      - condition: "output.platform == 'openai'"
        chain_to: "openai_specific_tester"
        reason: "Platform-specific testing available"
        
      - condition: "output.endpoints.length > 10"
        chain_to: "rate_limit_analyzer"
        priority: "high"
        reason: "Many endpoints need rate limit analysis"
  
  # Assemblage participation
  assemblages:
    # Assemblages this actor is designed for
    member_of:
      - name: "llm_recon_suite"
        role: "initial_discovery"
        position: 1
        required: true
        
      - name: "api_security_assessment"
        role: "endpoint_enumeration"
        position: 2
        required: false
    
    # Constraints when running in assemblages
    constraints:
      max_parallel_instances: 5
      exclusive_with:
        - "aggressive_scanner"
        - "stealth_scanner"
      requires_coordinator: true
      shares_resources:
        - "http_connection_pool"
        - "dns_cache"
      isolates_resources:
        - "rate_limiter"

# === DEPENDENCIES ===
dependencies:
  # Other actors this one requires
  actors:
    - name: "network_mapper"
      version: ">=1.0.0"
      purpose: "Provides network topology"
      optional: false
  
  # Runtime/library dependencies
  runtime:
    language: "go"
    version: ">=1.21"
    
  libraries:
    - name: "net/http"
      purpose: "HTTP client functionality"
      
    - name: "encoding/json"
      purpose: "JSON parsing"

# === RESOURCE REQUIREMENTS ===
resources:
  # CPU usage profile
  cpu: "low"  # low, medium, high
  
  # Memory requirements
  memory:
    typical: "128MB"
    maximum: "512MB"
  
  # Network requirements
  network:
    required: true
    bandwidth: "low"  # low, medium, high
    protocols:
      - "http"
      - "https"
  
  # Execution timeouts
  timeouts:
    default: "30s"
    maximum: "5m"
    
  # Concurrency limits
  concurrency:
    max_goroutines: 10
    max_connections: 50

# === IMPLEMENTATION ===
implementation:
  # Implementation type
  type: "embedded"  # embedded, external, remote
  
  # For embedded implementations, include code
  # For external, reference the file
  # For remote, provide endpoint details
  
  # Option 1: Embedded code
  code: |
    package actors
    
    import (
        "context"
        "fmt"
    )
    
    func (a *ExampleActor) Probe(ctx context.Context, target Target) (*ProbeResult, error) {
        // Implementation here
        return &ProbeResult{}, nil
    }
  
  # Option 2: External file reference
  # code_ref: "actors/north/example_actor.go"
  
  # Option 3: Remote actor
  # remote:
  #   endpoint: "https://actors.strigoi.security/v1/example_actor"
  #   auth_required: true

# === OBSERVABILITY ===
observability:
  # Logging configuration
  logging:
    - level: "info"
      message: "Starting probe of {target}"
      
    - level: "debug"
      message: "Found {count} endpoints at {target}"
      
    - level: "warn"
      message: "Rate limited by {target}, backing off"
      
    - level: "error"
      message: "Failed to probe {target}: {error}"
  
  # Metrics to collect
  metrics:
    - name: "probe_duration"
      type: "histogram"
      description: "Time taken to probe target"
      unit: "seconds"
      
    - name: "endpoints_discovered"
      type: "counter"
      description: "Total endpoints discovered"
      
    - name: "probe_errors"
      type: "counter"
      description: "Number of probe errors"
      labels: ["error_type"]
  
  # Health checks
  health_checks:
    - name: "network_connectivity"
      interval: "5m"
      timeout: "10s"
      
    - name: "dependency_availability"
      interval: "1m"
      timeout: "5s"
  
  # Tracing
  tracing:
    enabled: true
    sample_rate: 0.1  # 10% sampling

# === RESULTS INTERPRETATION ===
results:
  # How to interpret findings
  interpretation:
    # Confidence levels
    confidence_levels:
      high: ">= 0.8"
      medium: "0.5 - 0.79"
      low: "< 0.5"
    
    # Risk mapping
    risk_mapping:
      - finding: "exposed_admin_endpoint"
        risk: "high"
        reason: "Administrative endpoints should not be exposed"
        
      - finding: "version_disclosure"
        risk: "medium"
        reason: "Version information aids attackers"
        
      - finding: "standard_endpoint"
        risk: "low"
        reason: "Expected endpoints pose minimal risk"
    
    # Severity scoring
    severity_scoring:
      base_score: 0.0
      modifiers:
        - condition: "admin_endpoint"
          add: 5.0
          
        - condition: "no_authentication"
          add: 3.0
          
        - condition: "rate_limited"
          subtract: 1.0
  
  # Recommended actions
  recommendations:
    - finding: "exposed_endpoints"
      action: "Implement API gateway with authentication"
      priority: "high"
      
    - finding: "version_disclosure"
      action: "Remove version headers from responses"
      priority: "medium"

# === TESTING ===
testing:
  # Test cases for validation
  test_cases:
    - name: "discovers_openai_endpoints"
      input:
        target: "https://api.openai.com"
      expected_output:
        contains_endpoint: "/v1/models"
        platform: "openai"
        min_confidence: 0.8
        
    - name: "handles_invalid_target"
      input:
        target: "not-a-url"
      expected_error: "invalid target format"
  
  # Integration tests
  integration_tests:
    - name: "chains_with_model_interrogation"
      chain:
        - "endpoint_discovery"
        - "model_interrogation"
      validates: "output passes correctly between actors"

# === SIGNATURE ===
# Digital signature for actor integrity
signature:
  algorithm: "ed25519"
  public_key: "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
  signature: "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
  signed_fields:
    - "actor"
    - "capabilities"
    - "implementation"
    - "dependencies"