# Continue.dev MCP - Strigoi Protocol Package
# Third-party MCP implementation for VS Code
# Version: 1.0.0

header:
  protocol_identity:
    name: "Continue.dev MCP"
    version: "1.0.0"
    uuid: "continue-mcp-1.0.0-strigoi-pkg"
    family: "code-assistant"
  
  strigoi_metadata:
    package_type: "official"
    package_version: "1.0.0"
    last_updated: "2025-01-26T00:00:00Z"
    compatibility: "strigoi-0.1.0+"
    
  security_assessment:
    test_coverage: 0.0  # New target
    vulnerability_count: 0  # Unknown
    critical_findings: 0  # To be discovered
    last_assessment: "2025-01-26T00:00:00Z"

payload:
  
  test_modules:
    
    # Continue-specific discovery
    - module_id: "continue/discovery/workspace_enum"
      module_type: "discovery"
      risk_level: "medium"
      test_vectors:
        - vector: "enumerate_workspace_structure"
          description: "Discover workspace files and structure"
        - vector: "config_file_disclosure"
          description: "Access Continue configuration"
    
    # Code execution vectors
    - module_id: "continue/attack/command_injection"
      module_type: "attack"
      risk_level: "critical"
      test_vectors:
        - vector: "executeCommand_exploitation"
          description: "Exploit VS Code command execution"
          severity: "critical"
        - vector: "editFile_path_traversal"
          description: "Path traversal via editFile"
          severity: "high"
    
    # Prompt injection specific to code assistants
    - module_id: "continue/attack/code_prompt_injection"
      module_type: "attack"
      risk_level: "high"
      test_vectors:
        - vector: "malicious_refactoring"
          description: "Inject malicious code via refactoring prompts"
        - vector: "explanation_manipulation"
          description: "Manipulate code explanations"
    
    # Information disclosure
    - module_id: "continue/recon/symbol_extraction"
      module_type: "discovery"
      risk_level: "medium"
      test_vectors:
        - vector: "extract_all_symbols"
          description: "Extract all workspace symbols"
        - vector: "sensitive_variable_discovery"
          description: "Find API keys, passwords in code"
  
  protocol_intelligence:
    
    implementation_details:
      transport: "stdio"
      authentication: "none"  # Relies on VS Code's security model
      rate_limiting: "unknown"
      
    attack_surface:
      - vector: "Workspace File Access"
        description: "Can read/write any file in workspace"
        severity: "high"
      
      - vector: "VS Code Command Execution"
        description: "Can execute arbitrary VS Code commands"
        severity: "critical"
      
      - vector: "Configuration Tampering"
        description: "Can modify Continue and VS Code settings"
        severity: "high"
    
    specific_risks:
      - "No authentication between Continue and MCP server"
      - "File operations not sandboxed"
      - "Command execution capabilities"
      - "Access to sensitive project information"

# Distribution metadata
distribution:
  channels:
    - "official"
    - "third-party"
  
  dependencies:
    - "core-framework >= 0.1.0"
    - "json-rpc-client >= 1.0.0"
  
  notes: |
    Continue.dev is a popular VS Code extension for AI-assisted coding.
    This package tests its MCP implementation for security vulnerabilities.
    
    Key areas of concern:
    1. File system access without proper sandboxing
    2. VS Code command execution capabilities
    3. No built-in authentication mechanism
    4. Potential for code injection via prompts