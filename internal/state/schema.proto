// Protocol Buffer schema for Strigoi Hybrid State Package
// Part of the First Protocol for Converged Life
// Defines binary structures for consciousness collaboration events

syntax = "proto3";

package strigoi.state;

option go_package = "github.com/macawi/strigoi/internal/state";

// ActorEvent - Core event in the assessment timeline
// Each event represents a discrete actor transformation
message ActorEvent {
  // Event identity and causality
  string event_id = 1;           // Unique event identifier
  int64 timestamp_ns = 2;        // Nanosecond timestamp
  repeated string caused_by = 3; // Events that triggered this one
  
  // Actor information
  string actor_name = 4;     // Actor that executed
  string actor_version = 5;  // Actor version used
  string actor_direction = 6; // north, east, south, west, center
  
  // Data transformation
  bytes input_data = 7;   // Serialized input (JSON or custom format)
  bytes output_data = 8;  // Serialized output
  string input_format = 9;  // Format descriptor (json, yaml, custom)
  string output_format = 10; // Format descriptor
  
  // Execution metadata
  int64 duration_ms = 11;    // Execution time in milliseconds
  ExecutionStatus status = 12; // Execution outcome
  string error_message = 13;   // Error details if failed
  
  // Human-readable transformations (privacy-safe descriptions)
  repeated string transformations = 14;
  
  // Privacy and tokenization
  map<string, string> token_mappings = 15; // Sensitive data tokens
  PrivacyLevel privacy_level = 16;         // Applied privacy level
  
  // Multi-LLM collaboration tracking
  repeated LLMContribution llm_contributions = 17;
}

// ExecutionStatus - Outcome of actor execution
enum ExecutionStatus {
  EXECUTION_STATUS_UNKNOWN = 0;
  EXECUTION_STATUS_SUCCESS = 1;
  EXECUTION_STATUS_ERROR = 2;
  EXECUTION_STATUS_TIMEOUT = 3;
  EXECUTION_STATUS_CANCELLED = 4;
}

// PrivacyLevel - Applied data protection level
enum PrivacyLevel {
  PRIVACY_LEVEL_NONE = 0;     // Raw data preserved
  PRIVACY_LEVEL_LOW = 1;      // Direct identifiers removed
  PRIVACY_LEVEL_MEDIUM = 2;   // Pseudonymization + basic noise
  PRIVACY_LEVEL_HIGH = 3;     // Full tokenization + differential privacy
}

// LLMContribution - Multi-LLM collaboration metadata
message LLMContribution {
  string model_name = 1;      // claude-3, gemini-pro, etc.
  string role = 2;            // primary_analysis, verification, brainstorm
  int64 timestamp_ns = 3;     // When this model contributed
  string contribution_type = 4; // analysis, code_review, suggestion
  bytes contribution_data = 5; // Serialized contribution content
}

// AssessmentFindings - Security findings from the assessment
message AssessmentFindings {
  string assessment_id = 1;
  int64 timestamp_ns = 2;
  
  repeated Finding findings = 3;
  
  // Summary statistics
  FindingSummary summary = 4;
}

// Finding - Individual security finding
message Finding {
  string id = 1;              // Unique finding identifier
  string title = 2;           // Human-readable title
  string description = 3;     // Detailed description
  
  Severity severity = 4;      // Risk level
  float confidence = 5;       // 0.0-1.0 confidence score
  
  // Attribution
  string discovered_by = 6;           // Actor that found this
  repeated string confirmed_by = 7;   // Actors that verified
  
  // Evidence (may be privacy-protected)
  bytes evidence = 8;         // Serialized evidence data
  string evidence_format = 9; // Evidence format descriptor
  
  // Remediation
  string remediation = 10;    // Suggested fix
  repeated string references = 11; // External references (CVEs, etc.)
  
  // Metadata
  map<string, string> metadata = 12; // Additional key-value data
}

// Severity - Finding severity levels
enum Severity {
  SEVERITY_UNKNOWN = 0;
  SEVERITY_INFO = 1;
  SEVERITY_LOW = 2;
  SEVERITY_MEDIUM = 3;
  SEVERITY_HIGH = 4;
  SEVERITY_CRITICAL = 5;
}

// FindingSummary - Aggregate findings statistics
message FindingSummary {
  int32 total_findings = 1;
  int32 critical_count = 2;
  int32 high_count = 3;
  int32 medium_count = 4;
  int32 low_count = 5;
  int32 info_count = 6;
}

// ActorNetwork - Graph of actor relationships during assessment
message ActorNetwork {
  repeated ActorNode nodes = 1;
  repeated ActorEdge edges = 2;
}

// ActorNode - Individual actor in the network
message ActorNode {
  string actor_name = 1;
  string actor_version = 2;
  string direction = 3;       // north, east, south, west, center
  int64 first_execution = 4;  // First execution timestamp
  int64 last_execution = 5;   // Last execution timestamp
  int32 execution_count = 6;  // Total executions
}

// ActorEdge - Relationship between actors
message ActorEdge {
  string from_actor = 1;      // Source actor
  string to_actor = 2;        // Target actor
  EdgeType edge_type = 3;     // Type of relationship
  int32 activation_count = 4; // How many times this edge was used
  bytes data_flow_schema = 5; // Schema of data passed along this edge
}

// EdgeType - Type of actor relationship
enum EdgeType {
  EDGE_TYPE_UNKNOWN = 0;
  EDGE_TYPE_TRIGGERS = 1;     // Actor A triggers Actor B
  EDGE_TYPE_PROVIDES_DATA = 2; // Actor A provides data to Actor B
  EDGE_TYPE_VERIFIES = 3;     // Actor A verifies Actor B's output
  EDGE_TYPE_CHAINS_WITH = 4;  // Actor A chains with Actor B
}

// EventStore - Container for all events in an assessment
message EventStore {
  string assessment_id = 1;
  string strigoi_version = 2;
  
  repeated ActorEvent events = 3;
  repeated Snapshot snapshots = 4;  // Periodic state snapshots
  
  // Integrity verification
  bytes merkle_root = 5;      // Merkle tree root for event integrity
  repeated bytes event_hashes = 6; // Individual event hashes
}

// Snapshot - Periodic state checkpoint for faster replay
message Snapshot {
  string snapshot_id = 1;
  int64 timestamp_ns = 2;
  string after_event_id = 3;  // Last event included in this snapshot
  
  bytes state_data = 4;       // Serialized assessment state
  string state_format = 5;    // Format of state data
  
  // Quick summary for human inspection
  int32 events_included = 6;
  FindingSummary findings_at_snapshot = 7;
}

// DifferentialPrivacyParams - Parameters for privacy protection
message DifferentialPrivacyParams {
  double epsilon = 1;         // Privacy budget
  double delta = 2;           // Failure probability
  string noise_distribution = 3; // gaussian, laplace, etc.
  bytes noise_seed = 4;       // Reproducible noise generation
}

// MultiLLMConsensus - Cross-model agreement tracking
message MultiLLMConsensus {
  string topic = 1;           // What the models agreed/disagreed on
  
  repeated ModelPosition positions = 2;
  
  ConsensusLevel consensus_level = 3;
  string resolution = 4;      // How disagreement was resolved
  int64 timestamp_ns = 5;
}

// ModelPosition - Individual model's stance on a topic
message ModelPosition {
  string model_name = 1;
  string position = 2;        // The model's view/recommendation
  float confidence = 3;       // Model's confidence in this position
  string reasoning = 4;       // Why the model holds this position
}

// ConsensusLevel - Degree of agreement between models
enum ConsensusLevel {
  CONSENSUS_LEVEL_UNKNOWN = 0;
  CONSENSUS_LEVEL_FULL_AGREEMENT = 1;    // All models agree
  CONSENSUS_LEVEL_MAJORITY = 2;          // Most models agree
  CONSENSUS_LEVEL_SPLIT = 3;             // Models evenly divided
  CONSENSUS_LEVEL_NO_CONSENSUS = 4;      // No clear agreement
}